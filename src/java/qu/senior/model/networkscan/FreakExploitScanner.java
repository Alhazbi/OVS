/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package qu.senior.model.networkscan;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.LinkedHashMap;
import java.util.Map;
import qu.senior.model.common.common;

public class FreakExploitScanner extends Scanner {
    
    public FreakExploitScanner(){}
    
    //openssl s_client -connect www.microsoft.com:443 -cipher EXPORT </dev/null 2>&1 | grep "alert handshake failure"
    
    common c = new common();
    
    @Override
    public boolean checkExploit(String ip) throws Exception {
        
        //echo "QUIT\"|openssl s_client -connect 10.20.150.78:443 -cipher EXPORT </dev/null 2>&1 | grep "alert handshake failure"
        
        String out = c.executeCommand("echo \"QUIT\"|openssl s_client -connect "+ip+":443 -cipher EXPORT </dev/null 2>&1");
        
        return !(out.contains("alert handshake failure") || out.contains("Connection refused") || out.contains("connect:errno=111") || out.contains("connect:errno=110"));
        
//    URL url = new URL("https://tools.keycdn.com/ssl-freak-query.php");
//        Map<String, Object> params = new LinkedHashMap<>();
//        params.put("hostname", ip);
//        StringBuilder postData = new StringBuilder();
//        for (Map.Entry<String, Object> param : params.entrySet()) {
//            if (postData.length() != 0) {
//                postData.append('&');
//            }
//            postData.append(URLEncoder.encode(param.getKey(), "UTF-8"));
//            postData.append('=');
//            postData.append(URLEncoder.encode(String.valueOf(param.getValue()), "UTF-8"));
//        }
//        byte[] postDataBytes = postData.toString().getBytes("UTF-8");
//
//        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
//        conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.95 Safari/537.11");
//        conn.setRequestMethod("POST");
//        conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
//        conn.setRequestProperty("Content-Length", String.valueOf(postDataBytes.length));
//        conn.setDoOutput(true);
//        conn.getOutputStream().write(postDataBytes);
//        Reader in = new BufferedReader(new InputStreamReader(conn.getInputStream(), "UTF-8"));
//        String out = "";
//        for (int c; (c = in.read()) >= 0;) {
//
//            out += (char) c;
//
//        };
//        if(out.contains("not vulnerable") || out.contains("might be refused")){
//        status=false;
//        } else if(out.contains("is vulnerable")) status=true;
        

}

    @Override
    public String getName() {
      return "Freak SSL Exploit";
    }

    @Override
    public int getPortNeeded() {
       return 443;
    }
}
